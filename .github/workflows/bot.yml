name: Python Telegram bot (@popot_bot)

on:
#  push:
  pull_request:
#  schedule:
#    - cron: "0 2 * * 1-5"

jobs:
  autopep8:
    # Check if the PR is not raised by this workflow and is not from a fork
    if: startsWith(github.head_ref, 'autopep8-patches') == false && github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: autopep8
        id: autopep8
        uses: peter-evans/autopep8@v1
        with:
          args: --exit-code --recursive --in-place --aggressive --aggressive .
      - name: Set autopep8 branch name
        id: vars
        run: echo ::set-output name=branch-name::"autopep8-patches/${{ github.head_ref }}"
      - name: Create Pull Request
        if: steps.autopep8.outputs.exit-code == 2
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: autopep8 action fixes
          title: Fixes by autopep8 action
          body: This is an auto-generated PR with fixes by autopep8.
          labels: autopep8, automated pr
          branch: ${{ steps.vars.outputs.branch-name }}
      - name: Fail if autopep8 made changes
        if: steps.autopep8.outputs.exit-code == 2
        run: exit 1
  popotBotGitHubActions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
#        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8]
#        python-version: [3.5, 3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install BOT dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 .
      - name: Install BOT-test dependencies
        run: |
          pip install -r requirements_test.txt
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install google-chrome-stable
      - name: Run tests with pytest and generate coverage report
        run: |
          export DB_TEST=db_test
          pip install pytest-cov
          pytest --cov=./ --cov-report=xml test/
          unset DB_TEST
      - name: Show project dir files
        run: |
          pwd
          find . -not \( -path "*/.pytest_cache/*" -o -path "./.git/*" -o -path "*/__pycache__/*" -o -path "./.idea/*" \)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.3
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./coverage.xml
          flags: unittests
          nema: codecov-popot-bot
  artifacts:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Upload tests execution results
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: |
            assets
            screenshot
            report.html
            config.log
          if-no-files-found: ignore # 'warn' or 'ignore' are also available, defaults to `warn`
